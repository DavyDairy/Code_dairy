滑动窗口 leetcode 209

Given an array of positive integers nums and a positive integer target, return the minimal length of a 
subarray whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.

Example 1:

Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.

class Solution(object):
    def minSubArrayLen(self, target, nums):
        left = 0
        right = 0
        length = len(nums)
        result = float('inf') # 表示正无穷，因为后面要取min，所以这里赋一个比较大的值
        sum = 0

        for right in range(length):
            sum += nums[right]
            while sum >= target: #因为要让这个判断持续，即起始位置的一直移动，所以需要用while持续判断，而不是用if只判断一次
                result = min(right-left+1,result)
                sum -= nums[left]
                left += 1     
        return result if result != float('inf') else 0
-----------------------------------------------------------------------------------------------------------------------------------------------
滑动窗口 leetcode 3
找出字符串中无重复字符的最长子字符串的长度
class Solution(object):
    def lengthOfLongestSubstring(self, s):
        result = 0
        left = 0
        window = set() #建一个集合

        for right, value in enumerate(s): #enumerate()枚举返回index,value
            while value in window: #如果新的value在集合里的话，移除左边的，窗口往右缩小
                window.remove(s[left])
                left += 1
            window.add(value)
            result = max(right-left+1, result)

        return result
-----------------------------------------------------------------------------------------------------------------------------------------------

        
