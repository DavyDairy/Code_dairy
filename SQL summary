# 连续空余座位 603
+-------------+------+
| Column Name | Type |
+-------------+------+
| seat_id     | int  |
| free        | bool |
+-------------+------+

Method 1:
select distinct(c1.seat_id) 
from cinema c1 join cinema c2
on    abs(c2.seat_id-c1.seat_id)=1
where c1.free=1 and c2.free=1
order by c1.seat_id

Method 2:
select seat_id
from (
    select
        seat_id ,
        free ,
        lag(free,1,999) over() pre_free,
        lead(free,1,999) over() next_free
    from  cinema
)tmp
where  free=1 and (pre_free=1 or next_free=1 )
order by  seat_id
知识点：
lag(column_name, offset, default_value) OVER (PARTITION BY partition_clause ORDER BY order_clause)
"column_name" is the name of the column that you want to retrieve the value from.
"offset" is the number of rows before or after the current row to retrieve the value from. The default value is 1, which means the function retrieves the value from the previous or next row.
"default_value" is the value to return if the function cannot retrieve a value from the previous or next row.

Method 3: 类似我的想法
select
    seat_id
from(
    select
        seat_id
        ,count(*) over(partition by rk) num
    from(
        select
            seat_id
            ,seat_id - row_number() over() as rk
        from(
            select
            seat_id
            from
                cinema
            where free = 1    
        )t1    
    )t2    
)t3
where num > 1
---------------------------------------------------------------------------------------------------------------------------------------------
窗口函数中可以用聚合函数作排序依据
SELECT sale_id, rank() over(order by 聚合函数)
...
GROUP BY sale_id
**但因为使用了聚合函数，必须要group by
---------------------------------------------------------------------------------------------------------------------------------------------
PIVOT 透视
618. Students Report By Geography
+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| name        | varchar |
| continent   | varchar |
+-------------+---------+

Input: 
Student table:
+--------+-----------+
| name   | continent |
+--------+-----------+
| Jane   | America   |
| Pascal | Europe    |
| Xi     | Asia      |
| Jack   | America   |
+--------+-----------+
Output: 
+---------+------+--------+
| America | Asia | Europe |
+---------+------+--------+
| Jack    | Xi   | Pascal |
| Jane    | null | null   |
+---------+------+--------+

select
    max(case when continent = 'America' then name else null end) America,
    max(case when continent = 'Asia' then name else null end) Asia,
    max(case when continent = 'Europe' then name else null end) Europe
from
    (select 
        name, 
        continent, 
        row_number()over(partition by continent order by name) cur_rank
    from
        student)t 
group by cur_rank
先用rank分continent打标签，然后遍历三次max生成一行内容，max的意义是，比如Jack是America，
max(case when continent = 'America' then name else null end)时得到max(Jack,null,null) = Jack，成为Amrica这一列的值

ChatGPT例子
SELECT 
    name, 
    SUM(CASE WHEN month = 'Jan' THEN sales ELSE 0 END) AS Jan_sales,
    SUM(CASE WHEN month = 'Feb' THEN sales ELSE 0 END) AS Feb_sales,
    SUM(CASE WHEN month = 'Mar' THEN sales ELSE 0 END) AS Mar_sales
FROM 
    your_table
GROUP BY 
    name;
---------------------------------------------------------------------------------------------------------------------------------------------
+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| seller_id   | int     |
| product_id  | int     |
| buyer_id    | int     |
| sale_date   | date    |
| quantity    | int     |
| price       | int     |
+-------------+---------+
This table has no primary key, it can have repeated rows.
product_id is a foreign key to the Product table.
Each row of this table contains some information about one sale.
 

Write an SQL query that reports the products that were only sold in the first quarter of 2019. That is, between 2019-01-01 and 2019-03-31 inclusive.

SELECT p.product_id,product_name FROM sales s,product p 
WHERE s.product_id=p.product_id
GROUP BY p.product_id
HAVING SUM(sale_date < '2019-01-01')=0
AND SUM(sale_date>'2019-03-31')=0;
--------------------------------------------------------------------------------------------------------------------------------------------------------
次日留存率
select install_dt, 
        count(distinct if(datediff(t2.event_date, install_dt) = 1, t2.player_id,null))/count(distinct install.player_id) Day1_retention
from (
    select player_id, min(event_date) install_dt
    from Activity
    group by player_id
)install 
left join Activity t2
on t2.player_id = install.player_id
group by install_dt

更简单的，利用窗口min()over，不用自连接
select first_date as install_dt,
sum(if(datediff(event_date,first_date)=1,1,0))/count(distinct player_id)
as Day1_retention
from
(
    select player_id,event_date,min(event_date) over(partition by player_id) as first_date
    from activity
)tmp
group by first_date
--------------------------------------------------------------------------------------------------------------------------------------------------------
null值无法与确定的值作比较
--------------------------------------------------------------------------------------------------------------------------------------------------------
笛卡尔积
a表和b表每一条两两连接，组成大表
cross join / inner join效果一样（不写on条件）
--------------------------------------------------------------------------------------------------------------------------------------------------------
比率问题可以用MySQL的avg+if进行操作，null值会被归为0，无需ifnull
--------------------------------------------------------------------------------------------------------------------------------------------------------
一些占比的计算需要使用到的两张表的聚合结果，但不需要join两张表时，可以直接在select里面嵌入另一张表的计算，eg：
select contest_id, count(distinct user_id)/(select count(*) from Users) percentage
from Register 
group by contest_id

